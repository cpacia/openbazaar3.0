// Code generated by go-bindata.
// sources:
// sample-openbazaar.conf
// DO NOT EDIT!

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sampleOpenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5b\x73\xdb\xb8\x92\x7e\xd7\xaf\xe8\x87\x39\x75\x76\xab\x1c\xca\x56\x62\xe7\xa2\xf5\x56\x29\xb1\x93\xf8\x8c\xc7\x56\xd9\xce\x65\xfc\x06\x11\x4d\x11\x6b\x10\xe0\x00\xa0\x64\xcd\xd6\xce\x6f\xdf\xea\x06\x40\x52\x9e\xcb\xc3\xa9\xa4\xc6\x79\x48\x8c\x4b\x77\xa3\xaf\x5f\x37\x33\x87\x67\xdf\xf4\x67\x32\x87\x33\x11\x04\x78\x0c\x41\x99\xb5\x9f\x7c\x73\x06\x93\x39\xdc\xd5\x08\x52\x39\x2c\x83\x75\x3b\x08\x16\x7c\xb0\x0e\x41\x32\xe3\xae\xac\x41\x78\x08\x35\x82\x6d\xd1\xac\xc4\xaf\x42\x38\xde\x5b\x09\x8f\x07\xa0\xda\xca\x43\x83\x41\xd0\xd2\x01\x08\x23\x27\x73\x68\xbb\x95\x56\x25\x9f\x2a\x32\x03\xac\x44\xa7\x03\x28\x0f\xbf\x4d\x8b\x11\x29\x6b\x60\x79\x7d\x7b\xf1\x15\xae\x6f\xd1\x1f\xc0\x0f\x97\xd7\xef\x16\x97\x8b\xe5\xf2\x6c\x71\xb7\x98\x5e\xb7\x68\xde\xf6\xe7\xbe\x28\x23\xed\xd6\x1f\x4c\xe6\xf0\xdb\xf4\x52\xad\x9c\x70\xbb\xe9\xa2\x6d\xb5\x2a\x45\x50\xd6\xc0\x6d\xd7\xb6\xd6\x85\x27\xd7\x7e\x12\x25\x5c\xdf\xb2\x6c\xf0\x43\x6d\x1b\x9c\xee\xb1\x9f\xcc\x61\xa9\x85\x79\x5d\x00\x9c\x9b\x8d\x72\xd6\x34\x68\x02\x6c\x84\x53\x62\xa5\xd1\x83\x70\x08\xf8\xd8\x0a\x23\x51\x82\xb7\xa4\x8b\x1d\x34\x62\x07\x2b\x84\xce\xa3\x2c\x00\xae\xae\xef\xce\xdf\x64\xf9\x26\x73\xc0\x3f\x25\x14\x76\xad\x2a\x85\xd6\x3b\xf8\xc7\xe7\xc5\xcd\xc5\xe2\xed\xe5\xf9\x3f\x0e\x60\xd5\x85\x44\xb6\xf3\x81\xe8\x8a\xb2\x44\xef\x51\xc2\x56\x85\x7a\x32\x87\x1f\xf2\x61\xa8\xd1\x61\x01\xb0\xd0\xde\x1e\xc0\x6f\xa4\xcf\x5e\xb6\x60\xf7\xd5\x37\xd2\x19\x99\x81\xcc\x21\x95\x3b\xdd\xd3\xff\x04\x9e\xfc\x7c\x7b\x17\x9b\xc3\x15\x86\xad\x75\x0f\xdf\xd7\x8d\x3f\x79\x84\x80\x3e\x18\x0c\xf4\xda\xf4\xcf\xd3\x23\xde\x33\x6a\x83\xce\x0b\x0d\x4b\xdd\xad\xd9\x13\x96\x5a\xec\xe0\x3f\x3e\x2d\xcd\xf2\x3f\x41\x74\xc1\x36\x22\x24\xc3\x90\x72\xa2\xc7\x6b\xe5\x03\x1a\x20\x9f\x02\xbb\x0a\x42\x19\x12\x9d\x76\xf0\x31\xa0\x33\x42\xc3\xc5\x12\x84\x94\x0e\xbd\x87\xca\xd9\x06\x7c\x74\x41\x94\x20\x71\xa3\x4a\xf4\x05\xdc\xd5\xca\x83\x6d\xd9\x43\xa5\xf2\xd1\x17\x14\x0b\x69\x6c\xd7\x9a\x36\xca\xf8\xb3\xed\xd8\xab\x7c\x8b\xa5\xaa\x76\x60\x0d\x82\x75\xd0\x50\x2c\xfa\xad\x70\x4d\x66\x84\x9e\x2c\x9d\x64\xb3\x06\x2a\xeb\x40\x99\xd2\x36\xca\xac\xc1\x44\x55\x4f\xe6\x50\x5a\x63\xb0\x24\xae\x2c\x03\x7a\x1c\x11\x20\xbf\x25\x3f\x53\x06\x04\x6c\x84\x56\x12\x9a\x4e\x07\x45\x27\x88\x60\x23\x58\x3e\xe6\x4b\x6b\xa7\x53\xd5\xbe\x98\x1e\x16\xfc\x67\x1a\xca\x76\xfa\xe2\xf0\xf0\xe8\xe9\x89\x93\xe9\x9b\x37\x7f\xba\xb9\x7f\xfd\xf5\xe1\xe1\xf1\x94\x63\xe5\x8f\x29\xe4\xfd\x94\x3e\xd6\x22\xe0\x56\xec\x7a\x5d\xb3\xb0\xad\xc6\x47\xf4\xb0\xb2\xa1\x66\xa3\x5c\x2c\xdf\xdf\xf6\x27\x17\xcb\x0b\xb6\xf3\x7e\xe6\x9a\xcc\x79\xc3\x6e\xd0\xf1\x8e\x17\x4d\xaf\x16\xd6\xd2\x88\x83\xaf\x93\x86\xfe\x5c\x3f\x89\xd9\xf0\xc4\xa3\xd9\x4b\x7e\xe4\x51\x56\xc3\x8c\x5e\xf0\xd6\xda\xe0\x83\x68\x47\x06\xa0\x5c\xc0\x46\x08\x16\xfe\xc7\x2a\xc3\xd2\x24\xe3\x15\x70\x6d\xc0\x07\xe1\x42\x5c\xb5\x12\x61\xab\xb4\x86\x46\x3c\xe0\x64\x0e\xb6\x0b\x6b\x4b\xc6\x1e\x99\x98\xe8\xd0\xe1\x15\xb3\x72\xa2\x85\x16\xd1\x79\x56\x41\x47\x91\x51\x63\x43\x67\xa4\xf2\x25\xbf\xde\x86\x1a\x49\x1d\xf1\xd8\x13\x01\x26\xf3\x81\xd0\xf0\xb8\xc7\x82\xff\xf4\x16\x9e\xb6\xb3\x76\x7a\x34\x3b\x7b\xfe\xa3\xb5\x5f\x96\xf7\xcf\x1f\xdf\x5e\xdd\x7c\x78\x7c\x51\xd5\x37\xab\xea\xe7\x45\xf9\xf5\x53\x5d\xde\xd7\x77\xf7\xb3\xcb\x77\x0f\xff\x7a\xf9\xe2\xe1\x5f\x5f\x3f\x54\xbf\xbe\xbe\xfb\x7c\x79\x47\x3a\xb9\xe5\x22\x43\xe2\x55\xd6\x6d\x85\x93\xe0\xd1\x6d\x58\xe4\x91\x6a\x1c\x96\xa8\x36\x08\x0d\x7a\x2f\xd6\xe8\x61\x5b\x93\xd3\x57\x95\x56\x06\x0b\x58\x22\xba\x8b\x33\xf6\x22\x8e\x1a\x85\x92\x13\x64\x54\xd7\x0a\x29\xe3\xe4\xb7\xb5\xce\x56\x4a\x47\x96\xfc\x78\x56\xac\x8f\x47\x63\xc9\xcb\x5c\x26\x73\xce\xbb\x51\x69\xaa\x8a\xa9\xb9\x14\xc6\xd8\x90\x75\x1e\xf5\xad\x3c\x13\xc9\xf1\x35\x7e\x41\x20\x41\x7f\xe9\xd0\xed\x28\xe0\x27\xf3\xde\x19\x07\x73\x4a\xbb\x35\xda\x0a\x39\xbc\x8e\x53\x08\x71\x2d\x26\x73\x6f\xaa\x48\xef\xf4\xdf\x55\xf1\x37\xce\xb1\x73\xb8\xb3\xee\xfb\xe6\xf0\xd3\x6f\xfa\x33\x99\x3f\x2d\x6e\xfd\xcf\x97\xc5\xcd\xd5\xc5\xd5\x07\x78\xf6\x0c\xce\x16\x57\x1f\xce\x6f\xe0\xfe\xfa\xea\x9c\x7e\x4d\x3b\x93\x39\x8c\x50\x44\xc7\x49\x37\xe7\x0b\x0a\x19\xb8\x38\xe3\xc4\x2b\xc8\x79\xd0\xfb\x98\x66\x2f\x2a\xd8\xd9\x6e\xdf\x47\x70\x44\x88\x52\x7e\xaa\x85\xb8\xe1\xec\x5d\x62\xf6\xcf\x52\xa3\x70\x07\x74\xdf\x81\xc3\xfd\xd2\x92\xd0\x46\x8b\xae\x11\x06\x4d\xd0\x04\x40\xda\x36\xc6\x08\xdd\x48\x81\x4c\x52\x91\x9f\x6d\x94\x57\x2b\x8d\xb4\x1b\xe3\xdb\x3e\x49\x30\x49\x50\x72\x54\x65\x02\x1a\x49\xe9\x24\x58\x4e\x15\x64\xe5\x60\xa1\x11\x9e\xca\x08\xcb\x33\x88\xc2\x02\x46\x98\x72\x75\xfe\xf9\xfc\x26\xe5\xa9\x91\xae\x28\x72\x6c\x17\xa0\xf3\x44\xf3\xce\xba\x02\xae\x6c\xc8\xef\x25\x31\x26\x73\xa8\x94\xf3\x21\xde\x2d\x98\x61\x06\x3e\xa5\x35\x95\x5a\x77\x0e\x65\x4e\x5d\x92\x6e\xe1\x06\xdd\x0e\x88\xa2\xc6\x78\xad\x6b\xf3\x2b\x28\xb6\xca\x52\x49\x34\x81\xeb\x37\x6f\xa3\xfc\x4b\x99\xe2\x33\x7e\xfa\x74\x7b\x07\x12\x35\x06\x8c\xef\x64\xcc\xdb\x63\xe1\x14\xb4\xf1\x85\x94\x34\x0b\x38\xa3\xc3\xac\xab\x1a\x9f\x9c\x8e\x31\x5d\x59\x57\x8e\x2d\x9e\x95\x4a\x07\xab\x0a\x1d\x9a\x30\xd8\xaa\xe0\xa2\xcf\xf7\xb4\xa5\x43\x66\xc7\x75\x9d\xe2\xeb\x00\xac\x93\xe8\xf8\x6f\x28\xad\x32\x9e\x45\xae\xc5\x86\xbc\x70\x83\x92\x12\x13\xad\x48\x0b\xde\x16\xdf\x3e\x78\x52\xbc\x37\x7d\xba\x8a\x7a\x10\x06\xb0\x59\xa1\x24\xc0\x49\xfb\x52\x60\x63\x0d\x65\xd7\xc7\x5d\x2c\xc5\x3d\x16\xe1\x4c\xfb\x07\xb5\x8a\x4a\x58\x2e\xc0\x44\xa2\xf7\x4a\x46\x4a\xcc\x90\x03\x8e\xf6\xf0\xb1\xd4\x9d\x57\x1b\xd4\x3b\xa6\x47\x29\xb8\x8f\x16\xf6\x5d\x97\x01\x9f\x75\x11\x48\x9d\x75\x82\x85\x2d\x1f\x46\xc2\x13\xa0\x6e\xc3\x20\xdb\x5e\xe9\xac\xad\xeb\xd6\x75\x94\x9e\x98\x2e\xae\xce\x06\x26\x93\xf9\xc0\x86\xf2\xbc\xc3\x8a\xdb\xa3\x4e\xe8\x11\x13\xe5\xa9\x09\x80\xd6\xa9\x8d\x08\x58\xc0\xf5\x1f\xd5\xe8\x54\x95\x26\x73\x68\x84\xc4\x41\x09\xfb\x8f\x81\xce\x68\x0a\xfa\x20\xf4\x43\x0a\x4b\x11\xab\x86\xeb\x8c\xa1\x95\xb1\x52\x56\x58\x2b\x6e\xba\x28\xd2\x08\xe5\x67\xb9\xa2\x32\xbe\x71\x8e\x9e\xc3\x15\x09\x72\x9b\x8a\x00\x3c\x63\xcc\x54\x59\xad\xed\x96\x24\x8b\x30\xf7\xfb\xf5\xa9\xa6\x6b\x56\x04\x5e\x2a\x70\xe8\x5b\x6b\x12\x18\xde\x0a\x15\x38\x1d\x33\x3c\x68\x04\xeb\xed\x62\x79\x75\xcb\x15\x58\xf5\x28\x5c\x79\x10\x10\x9c\x90\x68\xab\x8a\x40\x0e\x86\x2d\x62\xcc\x8d\xa2\x2c\x3b\x27\xca\x1d\x11\xa7\xdf\xb9\x76\xf7\x55\xdb\xb7\x88\x92\xf4\xab\x5a\xe3\x7f\xe9\xac\xeb\x9a\x53\xc6\x76\x67\x11\xd1\xf3\x21\x0a\x74\x5b\x45\xc6\xcb\x6e\xe5\xbb\x55\x8c\xf0\xd6\xd9\x95\x58\xe9\x1d\x6c\x85\xe1\xaa\x20\x13\x78\x88\x21\x1c\x91\x08\x09\xc7\x2e\x43\x4c\xd2\x3f\xe9\xec\x0a\xf3\x83\x04\x68\xe1\xd6\x63\x25\x8c\x9f\x48\x6d\xba\x0a\xd1\xc7\x48\x10\xf6\xa1\x06\x1b\x1b\x5f\x41\xaf\x15\x46\x6e\x95\x0c\x75\x6c\x3d\xe8\x25\xad\x8f\x6e\x42\xa0\xf8\xd3\xcd\x65\xce\x56\x55\x8c\xbc\x5a\x98\x35\x82\x13\x81\x14\xf8\x13\x65\x68\x4a\xcf\xd6\x35\xb9\xb2\xbd\x55\x81\x52\xd3\x62\x83\x4e\xac\x71\x04\x8c\xf3\x65\xba\xdb\x3a\xbb\x51\x12\xdd\x69\x1d\x42\xeb\xdf\x4c\xa7\x41\x95\x0f\xe8\x46\x4d\x68\x61\xdd\x7a\x2a\x5a\x35\xd6\x27\x15\xd6\x51\x1a\x75\xa8\x05\x25\xf5\xaa\x33\x1c\x4c\x42\xab\xb0\x23\x36\x14\xd5\x3d\xf8\x67\x3d\x92\xc9\xe2\x6f\x31\xaf\x28\xb3\x8e\x86\xab\xbc\x35\x7a\x97\x1e\xdc\xb6\x68\x24\x08\x28\x6d\xc3\x6d\x7a\x7a\x51\xe7\xd1\x81\x58\xd3\x4a\xc6\x8d\xc3\x30\x63\x48\xf6\xc5\x64\xde\x89\x74\xf5\x34\xfd\xfd\x5d\xc2\x8d\x0c\xf3\xb7\x44\x5b\x6e\x47\xb7\xca\xd7\xa4\x1c\x34\x6c\x96\xdb\xdb\xcb\x0c\x26\x48\xb4\x21\xbb\x0d\x11\x56\xab\x75\x4d\x08\xc5\x61\x54\x8c\x44\x72\x3e\x35\x20\x8e\x9c\xc6\x38\xae\x18\xe2\x12\x49\x01\x0e\x1b\x1b\xc8\xdb\xcb\x5a\x19\x24\x7f\xae\x84\xd2\x9d\xc3\xec\x96\xc4\x9c\xfc\x9b\x0a\x33\xe9\x80\x0a\x26\xb5\xc9\xc1\x8e\x21\x17\xd9\xbf\xb4\x26\x38\xab\x87\xe8\x3a\xa0\xd4\xaf\x3b\xc6\x39\xd2\x09\xd5\x0b\xb0\x15\x5a\xc7\x02\xe2\xbd\x8e\xbe\x71\x37\x70\xdb\xe5\xfa\x6c\x30\x82\x2d\xa1\xbd\xed\x5b\x74\x76\x0f\x11\x6a\xce\x41\x7d\x1b\x5a\x22\x97\x49\x09\x0f\xb8\x03\x6a\x39\xc8\x40\x14\x51\x2c\x0c\xed\xaa\x4a\x95\x54\x25\x22\x53\x5a\xa1\x63\xa7\x53\xa2\x35\x0d\x76\xea\xbd\x2e\x68\x35\xee\x3f\xe0\xee\xf7\xdb\x0f\xb8\xcb\x39\x71\xf0\x87\xd4\x77\xc0\x4a\x78\x55\x82\xe8\x42\x0d\xa5\x43\x02\x46\x4a\x68\xcf\x32\x64\xc3\x25\x73\x64\xeb\x76\x9e\x5b\x94\x8e\xba\x96\x90\xc6\x69\x8c\xdb\x88\xa0\x08\x03\xe8\x23\xc5\xf0\x4b\x49\x3b\x54\x27\xf7\xef\x30\xe2\x74\x36\x60\x49\xc2\xf7\x26\x8d\x56\x2e\xe0\x22\xfc\xd3\x47\x15\x92\x93\x8c\x7d\x64\x60\xc3\x68\x69\x9f\x28\x61\x47\x02\x0d\x06\xb4\x2d\x85\xae\xad\x0f\x91\x11\x6d\x84\xd4\xcd\xb5\xce\xae\x9d\x68\x52\x13\x15\x07\x68\xd9\xc8\x8b\xe5\x05\x0f\x22\xc5\x03\xf5\x5f\xf9\x51\x59\x17\xad\xf0\x7e\x6b\x9d\x84\x15\x92\x53\x65\x28\x4a\xdb\x35\x3e\x02\x9a\xd2\x12\xda\xb9\xfd\xb8\x98\x1d\x9f\x40\x2d\x7c\x0d\xb6\x4a\x83\x20\x51\x06\x82\x1b\x99\xc4\x10\x05\x32\x39\x66\xd2\x46\xf2\x95\xc4\x68\x5b\x53\x27\xaa\x02\x78\x15\x3c\x77\xac\x8c\x32\xa2\xfb\x30\x02\x66\xc7\x29\xe0\x0b\xd5\x33\x56\x3e\x89\x2e\x0c\xcb\xeb\xf0\x97\x0e\x7d\x18\x9c\x93\xe8\xe6\xeb\x9d\x79\x46\x12\x72\xcc\xf5\xfc\x72\x15\x63\xd9\x73\x6f\x5c\xda\xa6\x15\x2e\xba\x75\xbf\x19\xa1\x25\x0f\x19\x27\x73\xd1\x2a\xca\x87\x46\x34\x78\x2a\xb4\x2a\x91\x97\x32\xd5\xd3\x63\x7c\xf5\xea\xc5\xab\xd7\xaf\xa4\x98\xbd\x3a\x7c\xf1\xf2\xe8\xf8\x48\x1e\xe2\xf1\x49\xf5\x4a\x96\x27\xb3\xd7\xb3\x97\x2f\x9f\x9f\x1c\x3e\x97\x87\xf2\x44\x88\xd5\x4a\xca\x93\x99\x38\x3a\xc2\xea\xe5\xec\x48\x1e\x1d\xbf\x98\xc9\x57\x9c\x87\x3d\xbd\x4a\x68\x1e\xa7\x05\x6a\xf5\x29\x94\x06\xff\xe5\x76\x4a\x18\xf6\x8a\xd2\xda\x07\xc5\xde\x4d\xdd\xc1\x13\x5f\xbd\xe3\xbe\xa2\x75\xaa\x11\x6e\x17\x8f\x8b\x54\xc9\x42\x32\x09\xfd\xbb\xf7\x12\xf6\x80\xf4\x5b\x3f\xfa\x1b\x86\x2e\xd1\x63\x19\x56\xee\x99\x90\x3c\x09\xbe\x20\x55\x70\x82\xa2\x83\xff\x46\x47\x20\x1a\x31\x5b\x47\xae\x1b\xa1\xbb\xd4\xe1\x29\x9f\x4c\x4b\x95\xb8\x0b\x54\x56\xd9\x6d\x45\x74\x53\x95\x0a\x8e\xb3\x04\x45\xa3\x23\x34\x0d\x19\x4e\x53\x32\x4c\xa9\x3e\xce\xe2\xe3\x73\x88\x7f\x6f\xea\x98\xca\x76\x4f\xc3\xbf\xf7\x00\xe5\xa3\x3d\xa3\x0e\x4f\x7f\xfe\x7a\xf5\x70\xdf\xbc\xff\xf5\xfe\xc3\xfb\xe6\xfe\xe3\x55\x7d\xff\xf1\xaa\x19\xd6\xee\xeb\x72\x76\xd3\xdc\x37\xef\x1f\xee\xd7\xb9\x13\x20\x9f\x0d\x48\xdd\x49\x9e\xb5\x94\xa3\xb6\x10\xfd\x01\xb4\x71\x88\xdd\xf4\xde\x43\x69\x09\xa5\x6a\x4f\x67\xaf\x8a\x17\xc7\xc5\xc9\xcb\xe2\xe8\xe5\xf1\x78\xfd\xf9\xac\x98\x3d\x7f\x5d\x1c\x1d\xbe\x2e\x8e\x8e\x39\xf5\xbe\xbb\xbe\xb9\xe5\x99\x36\x57\x1b\x09\xab\x5d\xfe\x72\x40\x6d\x62\x1e\x9f\xf2\x58\x27\xec\xa5\xbe\x60\xa1\x12\xda\x13\x5f\x63\x4b\xeb\x12\xae\xb9\xd8\x4f\x73\xb1\x6a\xf4\x73\x9b\x04\xaf\xb8\xc9\x14\x04\x0d\x53\xad\x27\xa0\x92\x67\x7b\x07\x69\x7c\xa6\xb8\x6d\x89\x53\x5c\xb2\x4a\x86\x5a\x59\xa4\x98\x70\x12\x13\x0e\x53\x34\xb2\xb5\xca\x04\x4f\xaa\x2b\xeb\x7c\x22\xf6\x54\xaa\xda\x4d\xe6\x79\x1c\xf4\x4f\x9f\xc0\x7f\x6c\x5c\x42\xc4\x30\x4c\x9e\x10\x4b\x12\xbb\xc2\x40\x85\x71\x1d\xa1\x08\x39\x73\x1a\x63\xa5\x89\x02\x8f\xb3\x8a\xc9\x3c\x3e\x22\x89\xff\x9d\xba\x80\x2f\x5c\x35\xff\x1e\x64\x72\x6e\x7a\xc0\x3d\x30\x8c\x65\x3c\xc6\x38\x19\x4c\x99\x11\x7a\x1c\x06\xaa\x5d\xcb\x4d\x76\x32\x9a\xcc\xd7\x78\xe0\x17\xb3\x22\x55\x2c\x4a\x81\x79\x14\x97\x3a\x47\x94\x50\x76\xce\xa1\x29\x09\x6a\x53\x4d\x12\x65\x9d\x9b\xf5\x62\x92\xfc\x35\x92\x3b\x7d\xfb\xee\xe3\xd3\x95\xbb\x77\x4f\x56\x2e\x7f\xb7\x72\x7f\xfe\x6e\x32\xdf\x5f\x3a\xbf\xfb\xf8\x5d\xcc\x17\x87\xaf\x0b\x23\xe1\x7d\x1a\xbe\xde\x46\x1c\xf6\xf7\x19\xb4\x07\x84\x24\xda\x33\x61\xe4\xb3\xfd\xb9\x70\x6a\xe3\x7f\x1f\xc0\xb6\xaa\xd0\xa5\x01\x6e\xec\x73\xc6\x17\x55\x89\xfd\x6c\x7c\x18\xaf\x3f\x1d\xff\xae\x10\x44\x9e\x97\x75\xbe\x1e\x06\xb2\x71\x38\x86\x89\x6a\x1e\x3c\x8f\x66\xeb\xa1\xb6\x1e\xff\x84\x94\xc3\xe0\x14\x6e\xa2\xab\xee\x4f\xb0\x43\x8d\x3b\xfe\x46\xd3\x50\xba\x2e\x1f\x28\xce\x79\xa2\x9d\x20\x57\xee\x55\x5b\xbb\x45\x17\x9b\x92\x54\x57\x0a\xb8\xe9\xe1\xb3\xf2\x59\x39\xbe\xb6\x9d\xe6\x3a\xd0\x7f\x5f\x5c\x61\xc4\x20\x0c\xad\x57\xf6\x31\x8e\xb4\x05\x68\x1b\xa8\x75\x8c\x94\xe3\x7c\xcb\x72\xf7\x26\x7c\x42\x1a\x7c\x97\x56\x63\x33\x2a\x60\x6d\xad\x04\x89\x42\xd3\xc5\xf4\x55\x37\x3a\xea\x68\x48\xdd\x0f\xf5\xff\xc0\x78\x71\x24\x2e\x46\x23\xc9\x28\x0d\x07\x51\xcc\x62\x19\x9c\xb6\x9d\x6b\x6d\xec\xa3\x1d\xa6\x4f\xbb\x2c\x06\xf3\x7d\x9a\xd0\x07\x52\x14\xd6\x91\x52\x66\x99\xa1\x03\x52\x6a\x25\xda\xca\xe5\xc1\x9b\xcf\x35\xca\x9b\x8a\x96\xfa\x11\xfb\xdb\xf3\xdb\x72\x16\x6e\xcd\xe6\xf3\x0d\x36\x3f\x7a\x7f\xf6\x93\xfa\xf1\xf2\x1e\x7f\xac\x3e\xdd\xd4\xdb\xaf\x62\x7b\xff\x45\x28\xfb\x8b\x5f\x3e\xdf\x1c\x6d\xbf\x4b\x64\x9e\xe1\xaa\x5b\x7f\x97\x28\x63\xca\xa0\xed\x7a\x4d\xce\xa3\x71\x83\x9a\x30\xf1\x67\xfe\xb8\xc5\xbf\x46\x2b\xfd\xaf\xa4\x83\xd4\x2f\x55\xf6\x80\x40\x86\x2a\xf1\x00\xb6\xc2\x91\xd3\x1d\x00\x3a\x67\xdd\x01\x94\x4e\x31\x68\xfa\xbf\xc9\x9c\x68\xf2\xfd\x53\xba\xf2\x17\xff\xa3\x40\xdb\x75\xdf\x0f\x69\xbb\xfe\xdd\xb7\xe8\xa9\xb6\xeb\xfe\x8b\x1f\x7f\x74\xcd\x9f\x81\xd2\xc7\x4e\xf2\x91\x8f\x77\x77\xcb\xfe\x5b\x4e\x42\xc2\xbe\x80\x78\x27\x2d\x8f\x32\x06\x0f\x79\x86\x7c\xcf\x1f\x73\x86\xcf\xb1\x09\x45\xf5\x1f\x8f\x9e\xd0\x51\x26\x4e\x34\xe8\x28\x79\x12\x8f\xee\xfa\x4f\xf3\x22\x30\x50\x78\x33\x9d\xf6\x5d\xc9\x9b\xff\x4a\x57\x49\xfa\xff\x9e\xb2\x26\xa7\x2d\xad\xc5\x51\x7f\xea\x7c\x0b\x46\xaa\x7c\xf0\xf4\xe4\xf0\x84\x43\xe7\x8b\x53\x01\xe1\xdd\xf2\x53\xcf\x3d\x65\xad\xe1\xcb\x16\xb7\x04\x94\x35\xda\x2e\xdf\x9e\x86\xa6\x1d\xfd\x77\x86\x82\xd6\x27\xff\x1f\x00\x00\xff\xff\x4e\xda\xf3\x7e\x86\x22\x00\x00")

func sampleOpenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_sampleOpenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func sampleOpenbazaarConf() (*asset, error) {
	bytes, err := sampleOpenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sample-openbazaar.conf", size: 8838, mode: os.FileMode(420), modTime: time.Unix(1591643561, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": sampleOpenbazaarConf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sample-openbazaar.conf": &bintree{sampleOpenbazaarConf, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
