// Code generated by go-bindata. DO NOT EDIT.
// sources:
// sample-openbazaar.conf

package repo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataSampleopenbazaarConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x5a\x5b\x73\x1b\xb7\x92\x7e\xe7\xaf\xe8\x87\x9c\x3a\xbb\x55\xf2\x50\xa2\x2d\xf9\xc2\xd5\x56\xd1\x96\x6c\xeb\x44\x91\x58\x12\x7d\x89\xde\xc0\x41\x0f\x07\x2b\x0c\x30\x01\x30\xa4\x98\xad\xcd\x6f\xdf\xea\x06\x30\x43\x2a\x76\x1e\x4e\x59\x15\xfb\xc1\x12\x2e\xdd\x8d\xbe\x7e\xdd\xe3\x29\x3c\xfb\xa1\x7f\x46\x53\x38\x13\x41\x80\xc7\x10\x94\x59\xf9\xd1\x0f\x67\x30\x9a\xc2\xa2\x46\x90\xca\x61\x19\xac\xdb\x42\xb0\xe0\x83\x75\x08\x92\x19\x77\x65\x0d\xc2\x43\xa8\x11\x6c\x8b\x66\x29\x7e\x17\xc2\xf1\xde\x52\x78\x3c\x00\xd5\x56\x1e\x1a\x0c\x82\x96\x0e\x40\x18\x39\x9a\x42\xdb\x2d\xb5\x2a\xf9\x54\x91\x19\x60\x25\x3a\x1d\x40\x79\xf8\x63\x5c\xec\x90\xb2\x06\xe6\xd7\xb7\x17\x5f\xe1\xfa\x16\xfd\x01\xfc\x74\x79\xfd\x6e\x76\x39\x9b\xcf\xcf\x66\x8b\xd9\xf8\xba\x45\xf3\xb6\x3f\xf7\x45\x19\x69\x37\xfe\x60\x34\x85\x3f\xc6\x97\x6a\xe9\x84\xdb\x8e\x67\x6d\xab\x55\x29\x82\xb2\x06\x6e\xbb\xb6\xb5\x2e\x3c\xba\xf6\x8b\x28\xe1\xfa\x96\x65\x83\x9f\x6a\xdb\xe0\x78\x8f\xfd\x68\x0a\x73\x2d\xcc\xeb\x02\xe0\xdc\xac\x95\xb3\xa6\x41\x13\x60\x2d\x9c\x12\x4b\x8d\x1e\x84\x43\xc0\x87\x56\x18\x89\x12\xbc\x25\x5d\x6c\xa1\x11\x5b\x58\x22\x74\x1e\x65\x01\x70\x75\xbd\x38\x7f\x93\xe5\x1b\x4d\x01\xbf\x4b\x28\x6c\x5b\x55\x0a\xad\xb7\xf0\x8f\xcf\xb3\x9b\x8b\xd9\xdb\xcb\xf3\x7f\x1c\xc0\xb2\x0b\x89\x6c\xe7\x03\xd1\x15\x65\x89\xde\xa3\x84\x8d\x0a\xf5\x68\x0a\x3f\xe5\xc3\x50\xa3\xc3\x02\x60\xa6\xbd\x3d\x80\x3f\x48\x9f\xbd\x6c\xc1\xee\xab\x6f\x47\x67\x64\x06\x32\x87\x54\xee\x74\x4f\xff\xa3\x1f\xef\x52\x53\xb8\xc2\xb0\xb1\xee\xfe\x69\xdd\xf6\x93\x47\x08\xe8\x83\xc1\x40\xaf\x4b\x3f\x9e\x1e\xf1\x9e\x51\x6b\x74\x5e\x68\x98\xeb\x6e\xc5\x96\x9f\x6b\xb1\x85\xff\xf8\x34\x37\xf3\xff\x04\xd1\x05\xdb\x88\x90\x0c\x41\xca\x88\x1e\xae\x95\x0f\x68\x80\x7c\x08\xec\x32\x08\x65\x48\x74\xda\xc1\x87\x80\xce\x08\x0d\x17\x73\x10\x52\x3a\xf4\x1e\x2a\x67\x1b\xf0\xd1\xe5\x50\x82\xc4\xb5\x2a\xd1\x17\xb0\xa8\x95\x07\xdb\xb2\x47\x4a\xe5\xa3\xed\x15\x0b\x69\x6c\xd7\x9a\x36\xca\xf8\xab\xed\xd8\x8b\x7c\x8b\xa5\xaa\xb6\x60\x0d\x82\x75\xd0\x50\xec\xf9\x8d\x70\x4d\x66\x84\x9e\x2c\x9b\x64\xb3\x06\x2a\xeb\x40\x99\xd2\x36\xca\xac\xc0\x44\x55\x8f\xa6\x50\x5a\x63\xb0\x24\xae\x2c\x03\x7a\xdc\x21\x40\x7e\x4a\x7e\xa5\x0c\x08\x58\x0b\xad\x24\x34\x9d\x0e\x8a\x4e\x10\xc1\x46\xb0\x7c\xcc\x97\xd6\x4e\xc7\xaa\x7d\x31\x3e\x2c\xf8\xef\x38\x94\xed\xf8\xc5\xe1\xe1\xd1\xe3\x13\x27\xe3\x37\x6f\xbe\xbb\xb9\x7f\xfd\xf5\xe1\xe1\xf1\x98\x63\xe3\xdb\x14\xf2\x7e\x4a\x17\x2b\x11\x70\x23\xb6\xbd\xae\x59\xd8\x56\xe3\x03\x7a\x58\xda\x50\xb3\x51\x2e\xe6\xef\x6f\xfb\x93\xb3\xf9\x05\xdb\x79\x3f\x53\x8d\xa6\xbc\x61\xd7\xe8\x78\xc7\x8b\xa6\x57\x0b\x6b\x69\x87\x83\xaf\x93\x86\xbe\xaf\x9f\xc4\x6c\x78\xe2\xd1\xe4\x25\x3f\xf2\x28\xab\x61\x42\x2f\x78\x6b\x6d\xf0\x41\xb4\x3b\x06\xa0\xd8\x67\x23\x04\x0b\xff\x63\x95\x61\x69\x92\xf1\x0a\xb8\x36\xe0\x83\x70\x21\xae\x5a\x89\xb0\x51\x5a\x43\x23\xee\x71\x34\x05\xdb\x85\x95\x25\x63\xef\x98\x98\xe8\xd0\xe1\x25\xb3\x72\xa2\x85\x16\xd1\x79\x56\x41\x47\x91\x51\x63\x43\x67\xa4\xf2\x25\xbf\xde\x86\x1a\x49\x1d\xf1\xd8\x23\x01\x46\xd3\x81\xd0\xf0\xb8\x87\x82\xff\xf6\x16\x1e\xb7\x93\x76\x7c\x34\x39\x7b\xfe\xb3\xb5\x5f\xe6\x77\xcf\x1f\xde\x5e\xdd\x7c\x78\x78\x51\xd5\x37\xcb\xea\xd7\x59\xf9\xf5\x53\x5d\xde\xd5\x8b\xbb\xc9\xe5\xbb\xfb\x7f\xbd\x7c\x71\xff\xaf\xaf\x1f\xaa\xdf\x5f\x2f\x3e\x5f\x2e\x48\x27\xb7\x5c\x54\x48\xbc\xca\xba\x8d\x70\x12\x3c\xba\x35\x8b\xbc\xa3\x1a\x87\x25\xaa\x35\x42\x83\xde\x8b\x15\x7a\xd8\xd4\xe4\xf4\x55\xa5\x95\xc1\x02\xe6\x88\xee\xe2\x8c\xbd\x88\xa3\x46\xa1\xe4\x84\x18\xd5\xb5\x44\xca\x38\xf9\x6d\xad\xb3\x95\xd2\x91\x25\x3f\x9e\x15\xeb\xe3\xd1\x58\xe2\x32\x97\xd1\x94\xf3\x6c\x54\x9a\xaa\x62\x2a\x2e\x85\x31\x36\x64\x9d\x47\x7d\x2b\xcf\x44\x72\x7c\xed\xbe\x20\x90\xa0\xbf\x75\xe8\xb6\x14\xf0\xa3\x69\xef\x8c\x83\x39\xa5\xdd\x18\x6d\x85\x1c\x5e\xc7\x29\x84\xb8\x16\xa3\xa9\x37\x55\xa4\x77\xfa\xef\xaa\xf8\x07\xe7\xd8\x29\x2c\xac\x7b\xda\x1c\x7e\xfa\x43\xff\x8c\xa6\xf0\xbd\x3f\x5f\x66\x37\x57\x17\x57\x1f\xe0\xd9\x33\x38\x9b\x5d\x7d\x38\xbf\x81\xbb\xeb\xab\x73\xfa\x35\xed\x8c\xa6\xb0\x83\x1a\x3a\x4e\xba\x39\x5f\x50\xc8\xc0\xc5\x19\x27\x5e\x41\xce\x83\xde\xc7\x34\x7b\x51\xc1\xd6\x76\xfb\x3e\x82\x3b\x84\x28\xe5\xa7\x5a\x88\x6b\xce\xde\x25\x66\xff\x2c\x35\x0a\x77\x40\xf7\x1d\x38\xdc\x2f\x2d\x09\x5d\xb4\xe8\x1a\x61\xd0\x04\x4d\x80\xa3\x6d\x63\x8c\xd0\x8d\x14\xc8\x24\x15\xf9\xd9\x5a\x79\xb5\xd4\x48\xbb\x31\xbe\xed\xa3\x04\x93\x04\x25\x47\x55\x26\xa0\x91\x94\x4e\x82\xe5\x54\x41\x56\x0e\x16\x1a\xe1\xa9\x8c\xb0\x3c\x83\x28\x2c\x60\x84\x25\x57\xe7\x9f\xcf\x6f\x52\x9e\xda\xd1\x15\x45\x8e\xed\x02\x74\x9e\x68\x2e\xac\x2b\xe0\xca\x86\xfc\x5e\x12\x63\x34\x85\x4a\x39\x1f\xe2\xdd\x82\x19\x66\xa0\x53\x5a\x53\xa9\x55\xe7\x50\xe6\xd4\x25\xe9\x16\xae\xd1\x6d\x81\x28\x6a\x8c\xd7\xba\x36\xbf\x82\x62\xab\x2c\x95\x44\x13\xb8\x7e\xf3\x36\xca\xbf\x94\x29\x3e\xe3\x97\x4f\xb7\x0b\x90\xa8\x31\x60\x7c\x27\x63\xdc\x1e\xfb\xa6\xa0\x8d\x2f\xa4\xa4\x59\xc0\x19\x1d\x66\x5d\xd5\xf8\xe8\x74\x8c\xe9\xca\xba\x72\xd7\xe2\x59\xa9\x74\xb0\xaa\xd0\xa1\x09\x83\xad\x0a\x2e\xfa\x7c\x4f\x5b\x3a\x64\xb6\x5c\xd7\x29\xbe\x0e\xc0\x3a\x89\x8e\xff\x85\xd2\x2a\xe3\x59\xe4\x5a\xac\xc9\x0b\xd7\x28\x29\x31\xd1\x8a\xb4\xe0\x6d\xf1\xe3\x83\x27\xc5\x7b\xd3\xa7\xab\xa8\x07\x61\x00\x9b\x25\x4a\x02\x98\xb4\x2f\x05\x36\xd6\x50\x76\x7d\xd8\xc6\x52\xdc\x63\x11\xce\xb4\xdf\xa8\x55\x54\xc2\x72\x01\x26\x12\xbd\x57\x32\x52\x62\x86\x1c\x70\xb4\x87\x0f\xa5\xee\xbc\x5a\xa3\xde\x32\x3d\x4a\xc1\x7d\xb4\xb0\xef\xba\x0c\xf8\xac\x8b\x40\xea\xac\x13\x2c\x6c\x79\xbf\x23\x3c\x01\xe8\x36\x0c\xb2\xed\x95\xce\xda\xba\x6e\x55\x47\xe9\x89\xe9\xec\xea\x6c\x60\x32\x9a\x0e\x6c\x28\xcf\x3b\xac\xb8\x1d\xea\x84\xde\x61\xa2\x3c\x81\x7e\x68\x9d\x5a\x8b\x80\x05\x5c\x7f\xab\x46\xa7\xaa\x34\x9a\x42\x23\x24\x0e\x4a\xd8\x7f\x0c\x74\x46\x53\xd0\x07\xa1\xef\x53\x58\x8a\x58\x35\x5c\x67\x0c\xad\xec\x2a\x65\x89\xb5\xe2\x26\x8b\x22\x8d\x50\x7d\x96\x2b\x2a\xe3\x07\xe7\xe8\x29\x5c\x91\x20\xb7\xa9\x08\xc0\x33\xc6\x4c\x95\xd5\xda\x6e\x48\xb2\x08\x73\x9f\xae\x2f\x35\x5d\xb3\x24\xf0\x52\x81\x43\xdf\x5a\x93\xc0\xf0\x46\xa8\xc0\xe9\x98\xe1\x41\x23\x58\x6f\x17\xf3\xab\x5b\xae\xc0\xaa\x47\xe1\xca\x83\x80\xe0\x84\x44\x5b\x55\x04\x72\x30\x6c\x10\x63\x6e\x14\x65\xd9\x39\x51\x6e\x89\x38\xfd\xce\xb5\xbb\xaf\xda\xbe\x45\x94\xa4\x5f\xd5\x1a\xff\x5b\x67\x5d\xd7\x9c\x32\xb6\x3b\x8b\x88\x9e\x0f\x51\xa0\xdb\x2a\x32\x9e\x77\x4b\xdf\x2d\x63\x84\xb7\xce\x2e\xc5\x52\x6f\x61\x23\x0c\x57\x05\x99\xc0\x43\x0c\xe1\x88\x44\x48\x38\x76\x19\x62\x92\x7e\xa4\xb3\x4b\xcc\x0f\x12\xa0\x85\x5b\xed\x2a\x61\xf7\x89\xd4\x96\xab\x10\x7d\x8c\x04\x61\x1f\x6a\xb0\xb1\xf1\x15\xf4\x5a\x61\xe4\x46\xc9\x50\xc7\xd6\x83\x5e\xd2\xfa\xe8\x26\x04\x8a\x3f\xdd\x5c\xe6\x6c\x55\xc5\xc8\xab\x85\x59\x21\x38\x11\x48\x81\xbf\x50\x86\xa6\xf4\x6c\x5d\x93\x2b\xdb\x5b\x15\x28\x35\xcd\xd6\xe8\xc4\x0a\x77\x80\x71\xbe\x4c\x77\x5b\x67\xd7\x4a\xa2\x3b\xad\x43\x68\xfd\x9b\xf1\x38\xa8\xf2\x1e\xdd\x4e\xd3\x59\x58\xb7\x1a\x8b\x56\xed\xea\x93\x0a\xeb\x4e\x1a\x75\xa8\x05\x25\xf5\xaa\x33\x1c\x4c\x42\xab\xb0\x25\x36\x14\xd5\x3d\xf8\x67\x3d\x92\xc9\xe2\x6f\x31\xaf\x28\xb3\x8a\x86\xab\xbc\x35\x7a\x9b\x1e\xdc\xb6\x68\x24\x08\x28\x6d\xc3\x6d\x79\x7a\x51\xe7\xd1\x81\x58\xd1\x4a\xc6\x8d\xc3\xf0\x62\x48\xf6\xc5\x68\xda\x89\x74\xf5\x34\xfd\xfb\x24\xe1\x46\x86\xf9\x5b\xa2\x2d\xb7\xa3\x1b\xe5\x6b\x52\x0e\x1a\x36\xcb\xed\xed\x65\x06\x13\x24\xda\x90\xdd\x86\x08\xab\xd5\xaa\x26\x84\xe2\x30\x2a\x46\x22\x39\x9f\x1a\x10\x47\x4e\x63\x1c\x57\x0c\x71\x89\xa4\x00\x87\x8d\x0d\xe4\xed\x65\xad\x0c\x92\x3f\x57\x42\xe9\xce\x61\x76\x4b\x62\x4e\xfe\x4d\x85\x99\x74\x40\x05\x93\xda\xe4\x60\x77\x21\x17\xd9\xbf\xb4\x26\x38\xab\x87\xe8\x3a\xa0\xd4\xaf\x3b\xc6\x39\xd2\x09\xd5\x0b\xb0\x11\x5a\xc7\x02\xe2\xbd\x8e\xbe\xb1\x18\xb8\x6d\x73\x7d\x36\x18\xc1\x96\xd0\xde\xf6\x2d\x3a\xbb\x87\x08\x35\xe7\xa0\xbe\x0d\x2d\x91\xcb\xa4\x84\x7b\xdc\x02\xb5\x1c\x64\x20\x8a\x28\x16\x86\x76\x55\xa5\x4a\xaa\x12\x91\x29\xad\xd0\xb1\xd3\x31\xd1\x1a\x07\x3b\xf6\x5e\x17\xb4\x1a\xf7\xef\x71\xfb\xe7\xed\x7b\xdc\xe6\x9c\x38\xf8\x43\xea\x3b\x60\x29\xbc\x2a\x41\x74\xa1\x86\xd2\x21\x01\x23\x25\xb4\x67\x19\xb2\xe1\x92\x39\xb2\x75\x3b\xcf\x2d\x4a\x47\x5d\x4b\x48\xe3\x33\xc6\x6d\x44\x50\x84\x01\xf4\x91\x62\xf8\xa5\xa4\x1d\xaa\x93\xfb\x77\x18\x71\x3a\x1b\xb0\x24\xe1\x7b\x93\x46\x2b\x17\x70\x11\xfe\xe9\xa3\x0a\xc9\x49\x76\x7d\x64\x60\xc3\x68\x69\x9f\x28\x61\x47\x02\x0d\x06\xb4\x2d\x85\xae\xad\x0f\x91\x11\x6d\x84\xd4\xcd\xb5\xce\xae\x9c\x68\x52\x13\x15\x07\x66\xd9\xc8\xb3\xf9\x05\x0f\x1e\xc5\x3d\xf5\x5f\xf9\x51\x59\x17\xad\xf0\x7e\x63\x9d\x84\x25\x92\x53\x65\x28\x4a\xdb\x35\x3e\x00\x9a\xd2\x12\xda\xb9\xfd\x38\x9b\x1c\x9f\x40\x2d\x7c\x0d\xb6\x4a\x83\x20\x51\x06\x82\x1b\x99\xc4\x10\x05\x32\x39\x66\xd2\x46\xf2\x95\xc4\x68\x53\x53\x27\xaa\x02\x78\x15\x3c\x77\xac\x8c\x32\xa2\xfb\x30\x02\x66\xc7\x29\xe0\x0b\xd5\x33\x56\x3e\x89\x2e\x0c\xcb\xeb\xf0\xb7\x0e\x7d\x18\x9c\x93\xe8\xe6\xeb\x9d\x79\x46\x12\x72\xcc\xf5\xfc\x72\x15\x63\xd9\x73\x6f\x5c\xda\xa6\x15\x2e\xba\x75\xbf\x19\xa1\x25\x0f\x15\x47\x53\xd1\x2a\xca\x87\x46\x34\x78\x2a\xb4\x2a\x91\x97\x32\xd5\xd3\x63\x7c\xf5\xea\xc5\xab\xd7\xaf\xa4\x98\xbc\x3a\x7c\xf1\xf2\xe8\xf8\x48\x1e\xe2\xf1\x49\xf5\x4a\x96\x27\x93\xd7\x93\x97\x2f\x9f\x9f\x1c\x3e\x97\x87\xf2\x44\x88\xe5\x52\xca\x93\x89\x38\x3a\xc2\xea\xe5\xe4\x48\x1e\x1d\xbf\x98\xc8\x57\x9c\x87\x3d\xbd\x4a\x68\x1e\xa7\x05\x6a\xf5\x29\x94\x06\xff\xe5\x76\x4a\x18\xf6\x8a\xd2\xda\x7b\xc5\xde\x4d\xdd\xc1\x23\x5f\x5d\x70\x5f\xd1\x3a\xd5\x08\xb7\x8d\xc7\x45\xaa\x64\x21\x99\x84\x7e\xee\xbd\x84\x3d\x20\xfd\xd6\x8f\xfe\x86\xa1\x4b\xf4\x58\x86\x95\x7b\x26\x24\x4f\x82\x2f\x48\x15\x9c\xa0\xe8\xe0\xbf\xd1\x11\x88\x46\xcc\xd6\x91\xeb\x5a\xe8\x2e\x75\x78\xca\x27\xd3\x52\x25\xee\x02\x95\x55\x76\x5b\x11\xdd\x54\xa5\x82\xe3\x2c\x41\xd1\xe8\x08\x4d\x43\x86\xd3\x94\x0c\x53\xaa\x8f\xb3\xf7\xf8\x1c\xe2\xdf\x9b\x3a\xa6\xb2\xed\xe3\xf0\xef\x3d\x40\xf9\x68\xcf\xa8\xc3\xd3\x5f\xbf\x5e\xdd\xdf\x35\xef\x7f\xbf\xfb\xf0\xbe\xb9\xfb\x78\x55\xdf\x7d\xbc\x6a\x86\xb5\xbb\xba\x9c\xdc\x34\x77\xcd\xfb\xfb\xbb\x55\xee\x04\xc8\x67\x03\x52\x77\x92\x67\x2d\xe5\x4e\x5b\x88\xfe\x00\xda\x38\xb4\x6e\x7a\xef\xa1\xb4\x84\x52\xb5\xa7\x93\x57\xc5\x8b\xe3\xe2\xe4\x65\x71\xf4\xf2\x78\x77\xfd\xf9\xa4\x98\x3c\x7f\x5d\x1c\x1d\xbe\x2e\x8e\x8e\x39\xf5\xbe\xbb\xbe\xb9\xe5\x19\x36\x57\x1b\x09\xcb\x6d\xfe\x52\x40\x6d\x62\x1e\x9f\xf2\x58\x27\xec\xa5\xbe\x60\xa1\x12\xda\x13\x5f\x63\x4b\xeb\x12\xae\xb9\xd8\x4f\x73\xb1\x6a\xf4\x73\x9b\x04\xaf\xb8\xc9\x14\x04\x0d\x53\xad\x27\xa0\x92\x67\x7b\x07\x69\x7c\xa6\xb8\x6d\x89\x53\x5c\xb2\x4a\x86\x5a\x59\xa4\x98\x70\x12\x13\x0e\x53\x34\xb2\xb5\xca\x04\x4f\xaa\x2b\xeb\x7c\x22\xf6\x54\xaa\xda\x8e\xa6\x79\x1c\xf4\x4f\x9f\xc0\x7f\x6c\x5c\x42\xc4\x30\x4c\x9e\x10\x4b\x12\xbb\xc2\x40\x85\x71\x15\xa1\x08\x39\x73\x1a\x63\xa5\x89\x02\x8f\xb3\x8a\xd1\x34\x3e\x22\x89\xff\x44\x5d\xc0\x17\xae\x9a\x7f\x0f\x32\x39\x37\x3d\xe0\x1e\x18\xc6\x32\x1e\x63\x9c\x0c\xa6\xcc\x0e\x7a\x1c\x06\xaa\x5d\xcb\x4d\x76\x32\x9a\xcc\xd7\x78\xe0\x17\xb3\x22\x55\x2c\x4a\x81\x79\x14\x97\x3a\x47\x94\x50\x76\xce\xa1\x29\x09\x6a\x53\x4d\x12\x65\x9d\x9b\xf5\x62\x94\xfc\x35\x92\x3b\x7d\xfb\xee\xe3\xe3\x95\xc5\xbb\x47\x2b\x97\x7f\x5a\xb9\x3b\x7f\x37\x9a\xee\x2f\x9d\x2f\x3e\x3e\x89\xf9\xe2\xf0\x75\x66\x24\xbc\x4f\xc3\xd7\xdb\x88\xc3\xfe\x3e\x83\xf6\x80\x90\x44\x7b\x26\x8c\x7c\xb6\x3f\x17\x4e\x6d\xfc\x9f\x03\xd8\x56\x15\xba\x34\xc0\x8d\x7d\xce\xee\x45\x55\x62\x3f\x1b\x1f\xc6\xeb\x8f\xc7\xbf\x4b\x04\x91\xe7\x65\x9d\xaf\x87\x81\x6c\x1c\x8e\x61\xa2\x9a\x07\xcf\x3b\xb3\xf5\x50\x5b\x8f\xdf\x21\xe5\x30\x38\x85\xeb\xe8\xaa\xfb\x13\xec\x50\xe3\x96\xbf\xd1\x34\x94\xae\xcb\x7b\x8a\x73\x9e\x68\x27\xc8\x95\x7b\xd5\xd6\x6e\xd0\xc5\xa6\x24\xd5\x95\x02\x6e\x7a\xf8\xac\x7c\x56\x8e\xaf\x6d\xa7\xb9\x0e\xf4\xdf\x13\x97\x18\x31\x08\x43\xeb\xa5\x7d\x88\x23\x6d\x01\xda\x06\x6a\x1d\x23\xe5\x38\xdf\xb2\xdc\xbd\x09\x9f\x90\x06\xdf\xa5\xd5\xd8\x8c\x0a\x58\x59\x2b\x41\xa2\xd0\x74\x31\x7d\xc5\x8d\x8e\xba\x33\xa4\xee\x87\xfa\xdf\x30\x5e\x1c\x89\x8b\x9d\x91\x64\x94\x86\x83\x28\x66\xb1\x0c\x4e\xdb\xce\xb5\x36\xf6\xd1\x0e\xd3\xa7\x5c\x16\x83\xf9\x3e\x4e\xe8\x03\x29\x0a\xeb\x48\x29\xb3\xcc\xd0\x01\x29\xb5\x12\x6d\xe5\xf2\xe0\xcd\xe7\x1a\xe5\x4d\x45\x4b\xfd\x88\xfd\xed\xf9\x6d\x39\x09\xb7\x66\xfd\xf9\x06\x9b\x9f\xbd\x3f\xfb\x45\xfd\x7c\x79\x87\x3f\x57\x9f\x6e\xea\xcd\x57\xb1\xb9\xfb\x22\x94\xfd\xcd\xcf\x9f\xaf\x8f\x36\x4f\x12\x99\x67\xb8\xec\x56\x4f\x12\x65\x4c\x19\xb4\x5d\xad\xc8\x79\x34\xae\x51\x13\x26\xfe\xcc\x1f\xb7\xf8\xd7\x68\xa5\xff\x95\x74\x90\xfa\xa5\xca\x1e\x10\xc8\x50\x25\x1e\xc0\x46\x38\x72\xba\x03\x40\xe7\xac\x3b\x80\xd2\x29\x06\x4d\xff\x37\x9a\x12\x4d\xbe\x7f\x4a\x57\xfe\xe2\x7f\x10\x68\xbb\xea\xfb\x21\x6d\x57\x7f\xfa\xf6\x3c\xd6\x76\xd5\x7f\xf1\xe3\x8f\xae\xf9\x33\x50\xfa\xd8\x49\x3e\xf2\x71\xb1\x98\xf7\xdf\x72\x12\x12\xf6\x05\xc4\x3b\x69\x79\x27\x63\xf0\x90\x67\xc8\xf7\xfc\x31\x67\xf8\x1c\x9b\x50\x54\xff\xf1\xe8\x11\x1d\x65\xe2\x44\x83\x8e\x92\x27\xf1\xe8\xae\xff\x14\x2f\x02\x03\x85\x37\xe3\x71\xdf\x95\xbc\xf9\xaf\x74\x95\xa4\xff\xef\x31\x6b\x72\xdc\xd2\x5a\x1c\xf5\xa7\xce\xb7\x60\xa4\xca\x07\x4f\x4f\x0e\x4f\x38\x74\xbe\x38\x15\x10\xde\xcd\x3f\xf5\xdc\x53\xd6\x1a\xbe\x6c\x71\x4b\x40\x59\xa3\xed\xf2\xed\x71\x68\xda\x9d\xff\xbe\x50\xd0\xfa\xe8\xff\x03\x00\x00\xff\xff\xcb\x6f\xd0\x92\x76\x22\x00\x00")

func bindataSampleopenbazaarConfBytes() ([]byte, error) {
	return bindataRead(
		_bindataSampleopenbazaarConf,
		"sample-openbazaar.conf",
	)
}

func bindataSampleopenbazaarConf() (*asset, error) {
	bytes, err := bindataSampleopenbazaarConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "sample-openbazaar.conf",
		size:        8822,
		md5checksum: "",
		mode:        os.FileMode(436),
		modTime:     time.Unix(1627226834, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"sample-openbazaar.conf": bindataSampleopenbazaarConf,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"sample-openbazaar.conf": {Func: bindataSampleopenbazaarConf, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
